import os
import json
import random
from PIL import Image

class SceneDataset:
    """
    A class to represent the synthetic dataset of scenes.
    Each item in the dataset corresponds to a single rendered frame and its ground truth data.
    """
    def __init__(self, data_dir):
        """
        Initializes the dataset by locating all scenes and preparing a list of samples.

        Args:
            data_dir (str): The path to the root directory containing the scene folders
                            (e.g., 'data/').
        """
        self.data_dir = data_dir
        self.samples = []

        if not os.path.isdir(self.data_dir):
            raise FileNotFoundError(f"Dataset directory not found: {self.data_dir}")

        # Get all scene directories, sort them to ensure a consistent order
        scene_dirs = sorted([d for d in os.listdir(self.data_dir) if d.startswith('scene_')])

        for scene_name in scene_dirs:
            scene_path = os.path.join(self.data_dir, scene_name)
            json_path = os.path.join(scene_path, 'scene_data.json')

            if os.path.exists(json_path):
                # Each scene has 16 frames, so we create a sample for each frame
                for frame_idx in range(16):
                    self.samples.append({
                        'scene_name': scene_name,
                        'json_path': json_path,
                        'frame_idx': frame_idx
                    })

    def __len__(self):
        """
        Returns the total number of samples (images) in the dataset.
        """
        return len(self.samples)

    def __getitem__(self, idx):
        """
        Retrieves a single sample from the dataset by its index.

        Args:
            idx (int): The index of the sample to retrieve.

        Returns:
            dict: A dictionary containing the image and its corresponding ground truth data.
                  {
                      'image': <PIL.Image>,
                      'camera_location': [x, y, z],
                      'camera_rotation': [x, y, z],
                      'objects': [ { 'object_type': ..., 'location': ... }, ... ]
                  }
        """
        sample_info = self.samples[idx]
        frame_idx = sample_info['frame_idx']

        # Load the scene's ground truth data from the JSON file
        with open(sample_info['json_path'], 'r') as f:
            scene_data = json.load(f)

        # Get the data specific to this frame
        camera_pose = scene_data['camera_poses'][frame_idx]
        
        # Construct the path to the image file
        image_path = os.path.join(self.data_dir, sample_info['scene_name'], f"frame_{frame_idx:02d}.png")
        
        # Load the image
        image = Image.open(image_path).convert('RGB')

        return {
            'image': image,
            'camera_location': camera_pose['location'],
            'camera_rotation': camera_pose['rotation'],
            'objects': scene_data['objects']  # Object data is the same for all frames in a scene
        }

# --- Example Usage ---
if __name__ == '__main__':
    # Assume your data is in a folder named 'output' as generated by the Blender script
    # Change this to 'data' if you have renamed it.
    DATA_DIRECTORY = 'output' 

    print(f"Loading dataset from: {DATA_DIRECTORY}")
    try:
        dataset = SceneDataset(data_dir=DATA_DIRECTORY)

        print(f"Dataset loaded successfully.")
        print(f"Total number of images in the dataset: {len(dataset)}")

        # Get a random sample from the dataset
        random_index = random.randint(0, len(dataset) - 1)
        print(f"\nRetrieving sample at random index: {random_index}")
        
        sample = dataset[random_index]
        
        # Print the information for the retrieved sample
        print("--- Sample Data ---")
        print(f"Image size: {sample['image'].size}")
        print(f"Camera Location: {sample['camera_location']}")
        print(f"Camera Rotation: {sample['camera_rotation']}")
        print(f"Number of objects in scene: {len(sample['objects'])}")
        for i, obj in enumerate(sample['objects']):
            print(f"  - Object {i+1}:")
            print(f"    Type: {obj['object_type']}")
            print(f"    Location: {obj['location']}")
        
        # You can display the image if you want
        # sample['image'].show()

    except FileNotFoundError as e:
        print(e)
    except Exception as e:
        print(f"An error occurred: {e}")
